<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

  <!-- HikariCP : HikariConfig + HikariDataSource -->
  <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
    <property name="jdbcUrl"  value="jdbc:mysql://192.168.56.1:3306/db_semi?serverTimezone=Asia/Seoul"/>
    <property name="username" value="greenit"/>
    <property name="password" value="greenit"/>
  </bean>
  
  <bean id="hikariDataSource" class="com.zaxxer.hikari.HikariDataSource">
    <constructor-arg ref="hikariConfig" />
  </bean>
  
  <!-- SqlSessionFactoryBean -->
  <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="hikariDataSource" />
    <property name="configLocation"  value="classpath:mybatis/configuration/mybatis-config.xml"/>
    <property name="mapperLocations" value="classpath:mybatis/mappers/*.xml"/>
  </bean>
  
  <!-- SqlSessionTemplate -->
  <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg ref="sqlSessionFactoryBean"/>
  </bean>

  <!-- CommonsMultipartResolver : 파일 업로드를 위해서 스프링이 호출해서 사용하는 bean. multipartResolver 이름으로 생성해야 합니다. -->
  <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="defaultEncoding" value="UTF-8"/>
    <property name="maxUploadSizePerFile" value="10485760" />
    <property name="maxUploadSize" value="104857600"/>
  </bean>

  <!-- AOP를 이용한 트랜잭션 처리하기 (DataSource가 필요하기 때문에 root-context.xml에서 진행합니다.) -->
  
  <!-- 1. DataSourceTransactionManager -->
  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="hikariDataSource" />
  </bean>
  
  <!-- 2. txManager를 Advice로 등록하기 -->
  <tx:advice id="txAdvice" transaction-manager="txManager">
    <tx:attributes>
      <tx:method name="*"/>
      <tx:method name="get*" read-only="true"/>
    </tx:attributes>
  </tx:advice>
  
  <!-- 3. Advice가 동작할 PointCut 등록하기 -->
  <aop:config>
    <aop:pointcut expression="execution(* com.min.semiapp.service.*Impl.*(..))" id="txPointCut"/>
    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
  </aop:config>
  
  <!-- 4. AOP 동작 (@EnableAspectJAutoProxy) -->
  <aop:aspectj-autoproxy />

</beans>
